{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","components/Navigation.js","routes/Detail.js","App.js","index.js"],"names":["About","props","console","log","className","Movie","id","title","year","summary","poster","genres","to","pathname","state","src","alt","style","backgroundColor","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","Navigation","Detail","location","history","undefined","push","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5ab8888.chunk.js","sourcesContent":["import React from 'react';\nimport './About.css';\n\nfunction About(props){\n  console.log(props);\n  //route props는 Route컴포넌트가 기본적으로 넘겨주는 props이다.여기에 데이터를 담아 보낼수 있다.\n  return (\n    <div className=\"about__container\">\n      <span>\n        “A JavaScript library for building user interfaces”\n      </span>\n      <span>- React -</span>\n    </div>\n  );\n}\n\n\n\nexport default About;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Movie({id, title, year, summary, poster, genres}) { //id, title, year, summary, poster는 props다.\r\n    return (\r\n        <div className=\"movie\">\r\n            <Link to={{pathname: '/movie-detail', state: {year, title, summary, poster, genres}}}>\r\n                <img src={poster} alt={title} title={title} />\r\n                <div className=\"movie__data\">\r\n                    <h3 className=\"movie__title\" style={{backgroundColor:'#eee'}}>{title}</h3>\r\n                    <h4 className=\"movie__year\">{year}</h4>\r\n                    <ul className=\"movie__genres\">\r\n                        {genres.map((genre , index) => { //  배열 원소의 인덱스가 자동으로 들어온다.이값으로 key props 사용\r\n                            return (\r\n                            <li key={index} className =\"movie__genre\">{genre}</li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                    <p className=\"movie__summary\">{summary.slice(0,180)}...</p>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = { \r\n    id:PropTypes.number.isRequired,\r\n    year:PropTypes.number.isRequired,\r\n    title:PropTypes.string.isRequired,\r\n    summary:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired,\r\n    genres:PropTypes.arrayOf(PropTypes.string).isRequired, //arrayOf()은 문자열을 원소로 같는 배열\r\n};\r\n\r\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from '../components/Movie';\nimport './Home.css';\n\n\nclass Home extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n \n  //axios는 네트워크를 사용함으로 느리다. 그래서 axios를 별도의 함수로 만들어서 자바스크립트에게 이 함수는 시간이 필요하고 (async) 즉 이 함수는 비동기 이다, axsio.get()의 실행 완료를 기다려 달라고(await) 알려줘야 함.\n  getMovies = async () => { \n    //const movies = await  axios.get('https://yts.mx/api/v2/list_movies.json');\n    //console.log(movies);\n    //console.log(movies.data.data.movies); //.연산자로 객체에 접근\n    const { // .연산자 적용 순서대로 구조 분해 할당을 적용함\n      data: {\n        data: {movies},\n      },\n    //} = await  axios.get('https://yts.mx/api/v2/list_movies.json');\n\n    //console.log(movies);\n    //this.setState({movies: movies}); // {state인 movies : 영화 데이터가 있는 변수 movies} -> {movies}로 축약 가능\n    //this.setState({movies});\n\n      } = await  axios.get('https://yts.mx/api/v2/list_movies.json?genre=animation&sort_by=like_count'); // ?sort_by=rating은 평점을 내림차순으로 보여줌 , ?quality=3D은 3D영화만 보여줌\n    this.setState({movies, isLoading:false});\n\n  };\n\n  //App컴포넌트가 그려지면(render()함수가 실행되면) 호출되는 생명주기함수\n  componentDidMount() {\n    // setTimeout(() => {\n    //   this.setState({ isLoading : false }); //state가 변경되면 render()함수를 다시 실행하여 변경된 state를 화면에 출력함\n    // },6000)\n\n    //axios.get('https://yts.mx/api/v2/list_movies.json'); //axios로 API(영화 데이터)를 호출\n\n    this.getMovies();\n  }\n\n  render(){\n    //구조분해할당으로 this.state 객체안에 있는 isLoading 이라는 키값을 우선 얻으면 항상 this.state를 입력하지 않아도 됨.\n    //const {isLoading} = this.state;\n    //return  <div>{isLoading ? 'Loading...' : 'We are ready'}</div>;\n\n    const {isLoading, movies} = this.state;\n    return ( \n            <section className=\"container\"> \n                {isLoading ? \n                  ( <div className=\"loader\">\n                        <span className=\"loader__text\">'Loading...'</span>\n                    </div> \n                  ) : (\n                    <div className=\"movies\">\n                      {movies.map((movie) => {\n                        return(\n                          <Movie\n                            key={movie.id}\n                            id={movie.id}\n                            year={movie.year}\n                            title={movie.title}\n                            summary={movie.summary}\n                            poster={movie.medium_cover_image}\n                            genres={movie.genres}\n                          />\n                        );\n                      })} \n                    </div>   \n                  )\n                }\n            </section>\n          );\n  }\n}\n\nexport default Home;\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n//a 엘리먼트는 페이지 전체를 다시 그린다. 그래서 Link컴포넌트 사용\r\n//state는 route props에 보내줄 데이터\r\nimport './Navigation.css';\r\n\r\nfunction Navigation(){\r\n    return (\r\n        <div className=\"nav\">\r\n            {/* <a href=\"/\">Home</a>\r\n            <a href=\"/about\">About</a> */} \r\n\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to=\"/about\">About</Link>\r\n\r\n            {/* <Link to=\"/\">Home</Link>\r\n            <Link to={{pathname:'/about', state: {fromNavigation: true}}}>About</Link> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport './Detail.css';\r\n//Detail컴포넌트가 라우팅되면 자동으로 route props가 넘어옴.\r\n\r\n// console탭 history에 출력된 값 중에서 push, go, goback, goforward 는 URL을 변경해 주는 함수,\r\n// push()는 지정된 URL로 보내주는 함수, 생명주기함수 사용해서 컴포넌트가 마운트 될때 push()함수 실행\r\n// 생명주기 함수를 사용하기 위해 클래스형 컴포넌트로 변경\r\n// 실행순서 render() -> componentDidMount()\r\n\r\n\r\n// function Detail(props) {\r\n//     console.log(props);\r\n//     return <span>hello</span>;\r\n// }\r\n\r\nclass Detail extends React.Component {\r\n    componentDidMount(){ //Detail컴포넌트가 마운트 되면\r\n        const { location, history } = this.props; //구조 분해 할당으로 location, history 를 얻고\r\n        if(location.state === undefined){\r\n            history.push('/'); //홈으로 이동 즉 리다이렉트 기능이다.\r\n        } \r\n    }\r\n\r\n    render(){\r\n        //return <span>hello</span>\r\n\r\n        // const {location} = this.props;\r\n        // return <span>{location.state.title}</span>\r\n\r\n        const {location} = this.props;\r\n        if(location.state){\r\n            console.log(location.state);\r\n            return ( //<span>{location.state.title}</span>\r\n                <div className=\"detail\">\r\n                        <img src={location.state.poster} alt={location.state.title} title={location.state.title} />\r\n                        <div className=\"detail__data\">\r\n                            <h3 className=\"detail__title\" style={{backgroundColor:'#eee'}}>{location.state.title}</h3>\r\n                            <h4 className=\"detail__year\">{location.state.year}</h4>\r\n                            <ul className=\"detail__genres\">\r\n                                {location.state.genres.map((genre , index) => { //  배열 원소의 인덱스가 자동으로 들어온다.이값으로 key props 사용\r\n                                    return (\r\n                                    <li key={index} className =\"detail__genre\">{genre}</li>\r\n                                    );\r\n                                })}\r\n                            </ul>\r\n                            <p className=\"detail__summary\">{location.state.summary.slice(0,180)}...</p>\r\n                        </div>\r\n                </div>\r\n                );            \r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\nexport default Detail;","import React from 'react';\n// import Home from './routes/Home'\nimport './App.css';\nimport {HashRouter, Route} from 'react-router-dom';\n\nimport About from './routes/About';\nimport Home from './routes/Home';\nimport Navigation from './components/Navigation';\n\nimport Detail from './routes/Detail';\n\n// router라우터는 사용자가 입력한 URL을 통해 특정 컴포넌트를 불러옴\n// Route에는 2가지 props를 전달,URL을 위한 path props 와 URL에 맞는 컴포넌트를 불러주기 위한 component props\n// Link, Route컴포넌트는 반드시 HashRouter안에 포함되어야 한다.\n\nfunction App(){\n  // return <Home />;\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n\n      <Route path=\"/movie-detail\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}